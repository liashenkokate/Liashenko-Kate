// Ð¡W_4

// task 3.1
#include <stdio.h>

void output_digits(unsigned n) {
	unsigned d1 = n % 10;
	unsigned d2 = (n / 10) % 10;
	unsigned d3 = (n / 100);
	printf("%u %u %u", d3, d2, d1);
}

int main() {
	unsigned n;
	scanf_s("%u", &n);

	if ((n<100) || (n>=1000)){
	   printf("%u is not 3-digit", n);
	   return 0;
    }

	output_digits(n);
}
    


//task 3.2
#include <stdio.h>
void inverted(int n) {
	int a = n / 100;
	int b = (n / 10) % 10;
	int c = n % 10;
	int inv = c * 100 + b * 10 + a;
	int inv2 = b * 100 + c * 10 + a;
	int inv3 = c * 100 + a * 10 + b;
	int inv4 = b * 100 + a * 10 + c;
	int inv5 = a * 100 + c * 10 + b;
	printf("%d %d %d %d %d\n", inv, inv2, inv3, inv4, inv5);
}
int main() {
	int n;
	printf("n=");//100-999
	scanf_s("%d", &n);
	if (n > 99 && n < 1000) {
		inverted(n);

	}
	else {
		printf("%d is not 3-digit!\n", n);
	}
}




//task 3.3
#include <stdio.h>
#include <inttypes.h>

int main() {
	int32_t a, b, c;
	printf("a,b,c:/n");
	scanf("%d,%d,%d", &a, &b, &c);

	int32_t d = a * b * c;
	printf("p=%d", d);

	int64_t d1 = (int64_t)a * b * c;
	printf("p=%" PRId64"/n", d1);
}



//task 3.4
#include <stdio.h>
#include <inttypes.h>

uint16_t dobutok(uint8_t a, uint8_t b) {
	return (uint16_t)a * b;
}

int main() {
	uint8_t a, b;
	scanf_s("%hhu", &a);
	scanf_s("%hhu", &b);
	printf("%hu", dobutok(a, b));
}



//task 3.5
#include <stdio.h>
int main() {
	long long a, b;
	scanf_s("%Ld %Ld", &a, &b);
	if (a > b) {
		printf("max=%Ld min = %Ld", a, b);
	}
	else {
		printf("max = %Ld min= %Ld", b, a);

	}
}




//task 3.6
#include <stdio.h>
#include <math.h>

int main() {
	float a, b, c;
	scanf_s("%f%f%f", &a, &b, &c);

	a = fabs(a);
	b = fabs(b);
	c = fabs(c);
	float f_min = a, f_max = b;
	if (b < a) {
		f_min = b;
		f_max = a;
	}
	if (f_min>c) {
		f_min = c;
	}
	if (f_max < c) {
		f_max = c;
	}
	printf("max = % f min = % f", f_max, f_min);
}




//task 3.7
#include <stdio.h>
#include <float.h>
#include <math.h>
#include <stdbool.h>

bool isNearlyZero(double x) {
	return(fabs(x) < 2 * DBL_EPSILON);
}
bool isNearlyZero(double x, double y) {
	return(fabs(x*y) <  fabs(x) * DBL_EPSILON);
}
int printSquareEquation(double a, double b, double c) {
	if (isNearlyZero(a)) {
		if (isNearlyZero(b)) {
			if (isNearlyZero(c)) {
				printf("Infinity of solutions\n");
				return -1;
			}
			else{
				printf("No solutions\n");
				return 0;
			}
		}
		else {
			double x = -c / b;
			printf("x=%lf\n", x);
			return 1;
		}
	}
	else {
		double d = b * b - 4 * a * c;
		if (isNearlyZero(d)) {
			double x = -b / (2 * a);
			printf("x1=x2=%lf\n", x);
			return 1;
		}
		else if (d > 0) {
			double x1 = (-b - sqrt(d)) / 2 / a;
			double x2 = (-b + sqrt(d)) / 2 / a;
			printf("x1= %lf, x2 = %lf\n", x1, x2);
			return 2;
		}
		printf("no real solutions\n");
	}
	return 0;
}

int main() {
	printf("% d\n", printSquareEquation(0, 0, 0));
	printf("% d\n", printSquareEquation(0, 0, 3));
	printf("% d\n", printSquareEquation(0, 8, 2));

	printf("% d\n", printSquareEquation(2, 4, 2));
	printf("% d\n", printSquareEquation(2, -6, 4));
	printf("% d\n", printSquareEquation(2, 6, 14));

	double a, b, c;
	printf("a=");
	scanf("%lf", &a);
	printf("b=");
	scanf("%lf", &b);
	printf("c=");
	scanf("%lf", &c);
}
