//10.1
#include <stdio.h>
#include <stdlib.h>

struct Date {
	unsigned day;
	unsigned month;
	int year;
};

int inputDate(struct Date* dd) {
	printf("\nDay:");
	scanf_s(" %u", &(dd->day));
	printf("\nMonth:");
	scanf_s(" %u", &(dd->month));
	printf("Year:");
	scanf_s(" %d", &(dd->year));
	return 0;
}

void outputDate(struct Date dd) {
	printf("%u.%u.%d", dd.day, dd.month, dd.year);
}

struct ChessField {
	char hor;
	unsigned char ver;
};

int inputChess (struct ChessField* cf) {
	printf("\nH:");
	scanf_s(" %c", &(cf->hor));
	printf("V:");
	scanf_s(" %hhu", &(cf->ver));

	if ((cf->ver) > 8 || (cf->ver) == 0) return 1;
	if ((cf->hor) < 'a' || (cf->hor) > 'h') return 2;
	return 0;
}

void oututChess(struct ChessField cf) {
	printf("%c%hhu", cf.hor, cf.ver);
}


typedef struct {
	float x, y;
} Vertex;


typedef struct {
	Vertex A;
	Vertex B;
}Rectangle;

int inputRect(Rectangle* r) {
	printf("A(x,y):");
	scanf_s("%f %f", &(r->A.x), &(r->A.y));
	printf("B(x,y):");
	scanf_s("%f %f", &(r->B.x), &(r->B.y));
	return 0;
}

void outputRect(const Rectangle r) {
	printf("A(%f, %f) - B(%f, %f)", r.A.x, r.A.y, r.B.x, r.B.y);
}



//10.2
#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

struct ChessField {
	char hor; //a
	unsigned char ver; //1
};

bool inputChess(struct ChessField* cf) {
	printf("\nHorizontally:");
	scanf_s(" %c", &(cf->hor));
	printf("Vertically:");
	scanf_s(" %hhu", &(cf->ver));

	if ((cf->ver) > 8 || (cf->ver) == 0) return false;
	if ((cf->hor) < 'a' || (cf->hor) > 'h') return false;
	return true;
}


bool ability(struct ChessField w1, struct ChessField w2) {

	if (abs(w1.hor - w2.hor) == abs(w1.ver - w2.ver) || abs(w1.hor - w2.hor) == 0 || abs(w1.ver - w2.ver) == 0) return true;
	else return false;
}


int main() {

	bool a;

	struct ChessField w1, w2;
	if (inputChess(&w1) && inputChess(&w2)) {
		a = ability(w1, w2);
	}
	else printf("Wrong input");

	printf("\nAbility to go from %c%hhu to %c%hhu is: %d", w1.hor, w1.ver, w2.hor, w2.ver, a);

}



//10.3
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct Date{
    unsigned day;
    unsigned month;
    int year;
};

char mon[13][4] = {"", "Jan", "Feb", "Mar", "Apr", "May", "jun", "Jul", "Aug" ,"Sep", "Oct", "Nov", "Dec"};
unsigned daymon[13] = {0,31,28,31,30,31,30,31,31,30,31,30,31};

int inputDate(struct Date* dd) {
    do {
        printf("\nDay:");
        scanf("%u", &(dd->day));
        
        printf("\nMonth:");
        scanf("%u", &(dd->month));
        
        if (dd->day>daymon[dd->month]) continue;
        
        printf("\nYear:");
        scanf("%d", &(dd->year));
        
    } while (1);
    
    return 0;
}

void outputDate (struct Date dd){
//    printf("%u.%u.%d",dd.day, dd.month, dd.year);
    printf("%u %s of %d\n",dd.day, mon[dd.month], dd.year);
}

struct Date tomorrow(struct Date dd){
    struct Date tom = dd;
    if (dd.day>=daymon[dd.month]) {
        if (dd.month==12) {
            tom.year++;
            tom.month = 1;
            tom.day = 1;
        }
        else{
            tom.month++;
            tom.day = 1;
        }
    }
    else{
        tom.day++;
    }
    return tom;
}

char* WEEK[] = {"Mon", "Tue", "Wen", "Thu", "Fri", "Sat", "Sun"};

unsigned weekday(struct Date dd){
    unsigned d=0;
    
    d = (dd.year-1970)*365;
    unsigned ly = (dd.year-1968)/4;
    d += ly;
    
    for (unsigned i=1; i<dd.month; i++) {
        d += daymon[i];
    }
    d += dd.day;
    return WEEK[d%7];
}
