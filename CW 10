//6.1
#include <stdio.h>
#include <inttypes.h>

int main() {
	uint8_t n;
	scanf_s("n= %hhd", &n);
	uint64_t m = 1UL << n;
	printf("2^%hhu = %" PRIu64 "\n", n, m);
}



//6.2
#include <stdio.h>
int main() {
	int n;
	unsigned k;
	scanf_s("%d", &n);
	scanf_s("%u", &k);
	int res = n | (1 << k);
	printf("r=%d", res);
}




//6.3
#include <stdio.h>
#include <inttypes.h>
int main() {
	uint64_t m;
	unsigned j;
	scanf_s("%" PRIu64"", &m);
	scanf_s("%u", &j);
	uint64_t res1 = m & ~(1 << 3);
	printf("r=%" PRIu64 ", %" PRIx64, res1, res1);
}




//6.4
#include <stdio.h>
#include <inttypes.h>
int main() {
	uint32_t m1;
	scanf_s("%" PRIu64"", &m1);
	uint32_t b0, b1, b2, b3, res2;
	b0 = m1 & 255;
	b1 = (m1 >> 8) & 0xFF;
	b2 = (m1 >> 16) & 0xFF;
	b3 = m1 >> 24;
	res2 = b0 | b1 | b2 | b3; // little-endian
	 // b3| b2|b1|b0
	 // b3 |b1|b2|b0
	printf("r=%" PRIu64 ", %" PRIx64, res2, res2);
}



//6.5
#include <stdio.h>
size_t max_bits_in_row(unsigned x) {

	size_t res = 0, count = 0;;
	size_t num_bits = 8 * sizeof(x);

	for (int i = 0; i < num_bits; i++) {
		unsigned r = x & (1 << i);
		if (r) {
			count++;
		}
		else {
			if (count > res) {
				res = count;
			}
		}
	}
	return res;
}

int main() {
	unsigned m2 = 0x01020340;
	printf(" max 1th in a row is %zu", max_bits_in_row(m2));
}




//6.6
#include <stdio.h>

int main() {
	for (int x = 0; x < 17; x++) {
		int t1 = (x & (x - 1)) > 0;
		int t2 = (x & -x);
		printf("%d: %d % d \n", x, t1, t2);
	}
}




//6.7
#include <stdio.h>
#include <inttypes.h>

int main() {
	uint32_t b0, b1, b2, b3;
	int some_number = 0x01020202;
	b0 = some_number & 255;
	b1 = (some_number >> 8) & 0xFF;
	b2 = (some_number >> 16) & 0xFF;
	b3 = some_number >> 24;

	if (b0 == 4 && b1 == 3) {
		printf("big endian");
	}
	else if (b0 == 1) {
		printf("little endian");
	}
	else if (b0 == 4 && b1 == 2) {
		printf("midle endian");
	}
	else {
		printf("unknown");
	}
}
