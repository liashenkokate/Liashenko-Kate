
//9.1

#include <stdio.h>
#include <stdlib.h>
float sum_sqr(float* arr, int n) {
    float s = 0.f;
    for (int i = 0; i < n; i++) {
        s += arr[i] * arr[i];
    }
    return s;
}
int main() {
    int n;
    scanf_s("%d", &n);
    float* mas = (float*)malloc(n * sizeof(float)); // dynamic array   
    if (!mas) {
        printf("error in alloc memory");
        return;
    }
    for (int i = 0; i < n; i++) {
        printf("a[%d]=", i);
        scanf_s("%f", &mas[i]);
    }
    printf(" s= %f", sum_sqr(mas, n));
    free(mas);
}

//9.2
#include <stdio.h>
#include <stdlib.h>
#include <cmath>
int input(int* n) {
    int i = 0;
    do {
        printf("a[%d]", i);
        scanf_s("%d", &n[i]);
    } while (n[i++] != 0);
    return i - 2;
}
int main() {
    int* memory = (int*)malloc(100 * sizeof(*memory));
    int n = input(memory);
    int cnt = 0, cnnt = 0;
    for (int i = 0; i < n; i++) {
        double tmp = sqrt(memory[i]);
        if (tmp * tmp == memory[i]) cnt++;
    }
    for (int i = 0; i < n; i++) {
        double tmp = cbrt(memory[i]);
        if (tmp * tmp * tmp == memory[i]) cnnt++;
    }
    printf("number of squeres = %d", cnt);
    printf("number of cubes = %d", cnnt);
    free(memory);
}



//9.3
#include <stdio.h>
#include <stdlib.h>
#include <cmath>
double* input_vector(int n) {
    double* a = (double*)calloc(n, sizeof(*a));
    for (int i = 0; i < n; i++) {
        printf("a[%d]", i);
        scanf_s("%lf", &a[i]);
    }
    return a;
}
double* sub_vect(const double* v1, const double* v2, const unsigned n) {
    double* res = (double*)calloc(n, sizeof(double));
    for (int i = 0; i < n; i++) {
        res[i] = v1[i] - v2[i];
    }
    return res;
}
int sub_v2(const double* v1, const double* v2, double* v4, int n) {
    for (int i = 0; i < n; i++) {
        v4[i] = v1[i] - v2[i];
    }
    return 0;
}
void free_vect(double* v1) {
    free(v1);
}
void vect_out(double* v, int n) {
    printf("(%g", v[0]);
    for (int i = 0; i < n; i++) {
        printf(", %g", v[i]);
    }
    printf(")\n");
}
int main() {
    int n;
    printf("n=");
    scanf_s("%d", &n);

    double* v1 = input_vector(n);
    double* v2 = input_vector(n);

    double* v3 = sub_vect(v1, v2, n);
    vect_out(v3, n);

    double v4[5];
    sub_v2(v1, v2, v4, n);
    vect_out(v4, n);

    free_vect(v1);
    free_vect(v2);
}

//9.4
#include <stdio.h>
#include <stdlib.h>
#include <cmath>
double* input_mat(int n) {
    double* a = (double*)calloc(n * n, sizeof(a)); // sizeof(*a)) has double* type
    for (int i = 0; i < n * n; i++) {
        printf("a[%d]", i);
        scanf_s("%lf", &a[i]);
    }
    return a;
}
void mat_out(double* v, unsigned n) {
    unsigned i;
    for (i = 0; i < n * n; i++) {
        printf("%g  ", v[i]);
        if ((i + 1) % n == 0 && i != 0) printf("\n");
    }
}
void free_matr(double* v1) {
    free(v1);
}
double* mult_matr(double* v1, double* v2, unsigned n, unsigned j) {
    double* res = (double*)calloc(n * n, sizeof(double));
    unsigned j = 0, k = 0, i = 0;
    for (unsigned i = 0; i < n * n; i++) {

        if ((i + 1) % n != 0) {

            for (unsigned t = 0; t < n; t++) {
                res[i] += v1[j] * v2[k];
                j += 1;
                k += n;
            }
            k = j;
            j -= i;
        }
        else {
        }
    }
    return res;
}

int main() {
    int m;
    printf("n=");
    scanf_s("%d", &m);
    double* v4 = input_mat(m);
    double* v5 = input_mat(m);
    double* v6 = mult_matr(v4, v5, m, i);
    mat_out(v6, m);
    free_matr(v4);
    free_matr(v5);
    free_matr(v6);
}
