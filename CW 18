
//14.1
#include <iostream>
#include <fstream>
#include <cstring>

using namespace std;

int main(int argc, char** argv) {
	const char* fname = "task.txt";
	fstream f(fname, fstream::in);

	if (!f) {
		cerr << "cannot open file " << fname << "!";
		return -1;
	}

	string buf;
	f >> buf;
	clog << "Buf=" << buf << ";\n";

	int sum_expr = 0;
	int num = 0;
	int prevSign = 0;
	for (size_t i = 0; i < buf.length(); i++) {
		if (isdigit(buf[i])) {
			//printf("1 %d\n", num);
			num = 10 * num;
			//printf("2 %d\n", num);
			num += (buf[i] - '0');
			//printf("3 %d\n", num);
		}
		else if (buf[i] == '+') {
			if (prevSign == 0) {
				sum_expr += num;
			}
			else {
				sum_expr -= num;
			}
			num = 0;
			prevSign = 0;
		}
		else if (buf[i] == '-') {
			if (prevSign == 0) {
				sum_expr += num;
			}
			else {
				sum_expr -= num;
			}
			num = 0;
			prevSign = 1;
		}
		else if (buf[i] == '=') {
			if (prevSign == 0) {
				sum_expr += num;
			}
			else {
				sum_expr -= num;
			}
			break;
		}
		else {
			cerr << "Cannot read char";
		}
	}
	cout << sum_expr;
}


//14.2
#include <iostream>
#include <fstream>
#include <string>
#include <algorithm>  

using namespace std;


int main() {
	const char* filename = "test.txt";
	fstream f(filename, fstream::in);
	string buff, word(""), res("");

	while (!f.eof()) {
		getline(f, buff);
		for (size_t i = 0; i < buff.size(); i++) {
			if (isalpha(buff[i])) {
				word += buff[i];
			}
			else if (buff[i] == ' ' || buff[i] == ',' || buff[i] == '?' || buff[i] == '!' || buff[i] == ';') {
				for (int i = 0; i < word.length() / 2; i++)
					swap(word[i], word[word.length() - i - 1]);
				res += word + buff[i];
				word = "";
			}
		}
		for (int i = 0; i < word.length() / 2; i++)
			swap(word[i], word[word.length() - i - 1]);
		res += word + '\n';
	}
	cout << res << '\n';
	f.close();
}




//14.3
#include <iostream>
#include <fstream>
#include <cstring>


using namespace std;

int main() {
	const char* fname = "test.txt";

	fstream f;
	f.open(fname, fstream::in);

	if (!f) {
		cerr << "cannot open file" << fname << "!";
		return -1;
	}

	string articles[] = { "der", "das", "die" };
	int num_articles = 3;

	string buf;
	bool isArticle = false;

	fstream g;
	g.open("tmpfile.txt", fstream::out);

	if (!g) {
		cerr << "cannot open file" << "tmpfile.txt" << "!";
		return -1;
	}

	while (!f.eof()) {
		f >> buf; // read word by word

		if (isArticle) {
			buf[0] = toupper(buf[0]);
		}
		g << buf << " ";
		cout << buf << " ";
		isArticle = false;
		for (int i = 0; i < num_articles; i++) {
			if (buf == articles[i]) {
				isArticle = true;
				break;
			}
		}
	}
	f.close();
	g.close();

	rename("tmpfile.txt", fname);

}



#include <iostream>
#include <fstream>
#include <string>
#include <algorithm>  

using namespace std;


int main() {
	const char* filename = "test.txt";
	fstream f(filename, fstream::in);
	string buff, word(""), res("");

	while (!f.eof()) {
		getline(f, buff);
		for (size_t i = 0; i < buff.size(); i++) {
			if (isalpha(buff[i])) {
				word += buff[i];
			}
			else if (buff[i] == ' ' || buff[i] == ',' || buff[i] == '?' || buff[i] == '!' || buff[i] == ';') {
				for (int i = 0; i < word.length() / 2; i++)
					swap(word[i], word[word.length() - i - 1]);
				res += word + buff[i];
				word = "";
			}
		}
		for (int i = 0; i < word.length() / 2; i++)
			swap(word[i], word[word.length() - i - 1]);
		res += word + '\n';
	}
	cout << res << '\n';
	f.close();
}



//14.5
#include <iostream>
#include <fstream>
using namespace std;

int getDoubles(const char* fname, char delim, double* mas, int n) {
	double x;
	int k = 0;
	char d;
	std::string s;
	std::ifstream f1(fname);

	if (f1.bad()) {
		std::cerr << "error opening file " << fname << std::endl;
	}

	while (!f1.eof() && k < n) {

		if (f1 >> x) {
			mas[k++] = x;
		}
		else { break; }
		if (f1 >> d) {
			if (d == delim)continue;
			else {
				std::cerr << "error in file";
			}
		}
		else { break; }
		k++;
	}
	f1.close();
	return k;
}


int main() {

	std::string fname;//char fname[10]
	std::cout << "Input filename:";
	std::cin >> fname;
	std::cout << "Input n and delimeter:";
	int n;
	std::cin >> n;
	char delim;
	std::cin >> delim;
	double* mas = new double[n];

	int k = getDoubles(fname.c_str(), delim, mas, n);

	for (int i = 0; i < n; i++) {
		std::cout << mas[i] << ", ";
	}

	delete[] mas;
}
